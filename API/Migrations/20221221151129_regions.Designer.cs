// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(CourierDbContext))]
    [Migration("20221221151129_regions")]
    partial class regions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("houseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("API.Models.loginCredentials", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("LoginCredentials");
                });

            modelBuilder.Entity("API.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("courierId")
                        .HasColumnType("int");

                    b.Property<int>("packageId")
                        .HasColumnType("int");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("courierId");

                    b.HasIndex("packageId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("API.Models.Package", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<float?>("CODcost")
                        .HasColumnType("real");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<float>("depth")
                        .HasColumnType("real");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("heigth")
                        .HasColumnType("real");

                    b.Property<bool>("isStandardShape")
                        .HasColumnType("bit");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("receiverAddressId")
                        .HasColumnType("int");

                    b.Property<int>("senderAddressId")
                        .HasColumnType("int");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.Property<float>("width")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("receiverAddressId");

                    b.HasIndex("senderAddressId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("API.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("courierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("courierId")
                        .IsUnique()
                        .HasFilter("[courierId] IS NOT NULL");

                    b.ToTable("regions");
                });

            modelBuilder.Entity("API.Models.RegionPins", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("regionId")
                        .HasColumnType("int");

                    b.Property<float>("x")
                        .HasColumnType("real");

                    b.Property<float>("y")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("regionId");

                    b.ToTable("RegionPins");
                });

            modelBuilder.Entity("API.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("idPackage")
                        .HasColumnType("int");

                    b.Property<int>("idStatusName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idPackage");

                    b.HasIndex("idStatusName")
                        .IsUnique();

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("API.Models.statusNames", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("StatusNames");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("defaultAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("loginCredentialsId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("defaultAddressId")
                        .IsUnique()
                        .HasFilter("[defaultAddressId] IS NOT NULL");

                    b.HasIndex("loginCredentialsId")
                        .IsUnique()
                        .HasFilter("[loginCredentialsId] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("API.Models.Order", b =>
                {
                    b.HasOne("API.Models.User", "courier")
                        .WithMany("orders")
                        .HasForeignKey("courierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Package", "package")
                        .WithOne("order")
                        .HasForeignKey("API.Models.Order", "packageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courier");

                    b.Navigation("package");
                });

            modelBuilder.Entity("API.Models.Package", b =>
                {
                    b.HasOne("API.Models.User", "Receiver")
                        .WithMany("receiverPackages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.User", "Sender")
                        .WithMany("senderPackages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Address", "receiverAddress")
                        .WithMany("receiverPackages")
                        .HasForeignKey("receiverAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Address", "senderAddress")
                        .WithMany("senderPackages")
                        .HasForeignKey("senderAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("receiverAddress");

                    b.Navigation("senderAddress");
                });

            modelBuilder.Entity("API.Models.Region", b =>
                {
                    b.HasOne("API.Models.User", "courier")
                        .WithOne("region")
                        .HasForeignKey("API.Models.Region", "courierId");

                    b.Navigation("courier");
                });

            modelBuilder.Entity("API.Models.RegionPins", b =>
                {
                    b.HasOne("API.Models.Region", "region")
                        .WithMany("regionPins")
                        .HasForeignKey("regionId");

                    b.Navigation("region");
                });

            modelBuilder.Entity("API.Models.Status", b =>
                {
                    b.HasOne("API.Models.Package", "package")
                        .WithMany("statuses")
                        .HasForeignKey("idPackage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.statusNames", "StatusName")
                        .WithOne("status")
                        .HasForeignKey("API.Models.Status", "idStatusName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusName");

                    b.Navigation("package");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Address", "defaultAddress")
                        .WithOne("user")
                        .HasForeignKey("API.Models.User", "defaultAddressId");

                    b.HasOne("API.Models.loginCredentials", "loginCredentials")
                        .WithOne("user")
                        .HasForeignKey("API.Models.User", "loginCredentialsId");

                    b.Navigation("defaultAddress");

                    b.Navigation("loginCredentials");
                });

            modelBuilder.Entity("API.Models.Address", b =>
                {
                    b.Navigation("receiverPackages");

                    b.Navigation("senderPackages");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.loginCredentials", b =>
                {
                    b.Navigation("user")
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Package", b =>
                {
                    b.Navigation("order");

                    b.Navigation("statuses");
                });

            modelBuilder.Entity("API.Models.Region", b =>
                {
                    b.Navigation("regionPins");
                });

            modelBuilder.Entity("API.Models.statusNames", b =>
                {
                    b.Navigation("status")
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("receiverPackages");

                    b.Navigation("region");

                    b.Navigation("senderPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
